{layout none}
<html>
    <head>
        
        <script src="{$basePath}/js/front/three/three.min.js"></script>
        <script src="{$basePath}/js/front/three/renderers/Projector.js"></script>
        <!--<script src="{$basePath}/js/front/three/loaders/MTLLoader.js"></script>-->
        <script src="{$basePath}/js/front/three/loaders/OBJLoader.js"></script>
        

        <script src="{$basePath}/js/front/three/Detector.js"></script>
        <!--<script src="{$basePath}/js/front/three/libs/stats.min.js"></script>-->
        
    </head>
    <body style="margin: 0px;">
        
        <script type="x-shader/x-vertex" id="vertexShader">              
            varying vec2 positionnew;


            void main() {
                positionnew = uv;

                gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);
            }
        </script>

        <script type="x-shader/x-fragment" id="fragmentShader">  
            uniform sampler2D texture;
            uniform sampler2D map;
            
            uniform float time;

            varying vec2 positionnew;

            void main() {
                
                float frequency=30.0;
                float amplitude = 0.001;
                float speed = 0.05;
                float distortion = sin( positionnew.y * frequency + time * speed ) * amplitude;
                
                float mapFactor = texture2D(map, positionnew).r;
                
                vec4 color = texture2D(texture, vec2(positionnew.x + distortion * mapFactor, positionnew.y));
                
                
                gl_FragColor = color;
            }
        </script>  
        
        <script>
            
            var width, height, aspectRatio;
            
            width = window.innerWidth;
            height = window.innerHeight;
            aspectRatio = width / height;
            
            var textureLoader = new THREE.TextureLoader();
            
            scene = new THREE.Scene();
            renderer = new THREE.WebGLRenderer();
            renderer.autoClear = false;
            renderer.setSize(width, height);
            camera = new THREE.OrthographicCamera(width / -2, width / 2, height / 2, height / -2, 1, 1000);
            camera.position.z = 10;
            
            var mesh;


            const geometry = new THREE.PlaneGeometry(width, height);
            
            var uniforms = {
                texture: { type: "t", value: THREE.ImageUtils.loadTexture( "../images/front/sauna.jpg" ) },
                map: { type: "t", value: THREE.ImageUtils.loadTexture( "../images/front/distortion.jpg" ) },
                time : { value: 1 }
            };
            
            const material = new THREE.ShaderMaterial({
                uniforms: uniforms,
                vertexShader: document.getElementById('vertexShader').textContent,
                fragmentShader: document.getElementById('fragmentShader').textContent
            });
            
            mesh = new THREE.Mesh(geometry, material);
            
            mesh.position.x = 0;
            mesh.position.y = 0;
            
            scene.add(mesh);


            // animate & render
            document.body.appendChild(renderer.domElement);
            animate();
            
            
            
            
            var fps=60; // target frame rate
            var frameDuration=300/fps; // how long, in milliseconds, a regular frame should take to be drawn
            var time=0; // time value, to be sent to shaders, for example
            var lastTime=0; // when was the last frame drawn
            function animate(elapsed) {

                // how long ago has the last frame been rendered
                var delta=elapsed-lastTime;
                lastTime=elapsed;

                // how much of a frame did the last frame take
                var step=delta/frameDuration;
                // add it to the time counter
                time+=step;

                mesh.material.uniforms.time.value = time ;

                render();
                requestAnimationFrame(animate);
            }

            function render() {
                renderer.clear();

                camera.lookAt(scene.position);
                renderer.render(scene, camera);
            }
            
        </script>
        
    </body>
</html>
